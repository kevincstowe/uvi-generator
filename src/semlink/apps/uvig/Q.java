
///////////////////
// UVI Generator //
// Derek Trumbo  //
///////////////////

package semlink.apps.uvig;

import java.io.PrintWriter;

/**
 * With a name chosen almost entirely on the basis of brevity, this class was only created
 * for the purpose of removing the complexity of writing text to an output stream to
 * a separate file.  Another class in the package first sets this class's writer
 * to an already-instantiated writer, and then calls any of the many "oh" methods, which
 * stand for "Output HTML" - pretty simple.  The reason there are so many "oh" methods is
 * that the HTML generated by this UVI tool is <I>formatted</I>.  It is not clumped together
 * as if it were clearly created by an automatic process.  It is indented just as the
 * author of this tool would indent his HTML code.  Therefore, each method below provides
 * a slightly different interface for controlling the indentation and newlines sent to
 * the output stream.
 * <BR><BR><I>NOTE: Any reference to "HTML Files" should be taken as a synonym for "PHP Files."
 * When this documentation was created, only *.html files were used.  Later, they were
 * converted to *.php files to facilitate dynamic content (i.e. comments).</I>
 *
 * @see uvi.Generator#generateHTMLFiles()
 * @see uvi.Generator#generateIndexFiles()
 * @see uvi.Sweeper
 *
 * @author Derek Trumbo
 */
public class Q
{

    ////////////
    // Fields //
    ////////////

    /**
     * The output stream for the current HTML file being processed.
     * It is set right as each HTML file is about to be generated and is used
     * in the <CODE>Q.oh</CODE> "Output HTML" methods.
     *
     * @see uvi.Generator#generateHTMLFiles()
     * @see uvi.Generator#generateIndexFiles()
     */
    private static PrintWriter curWriter = null;

    /////////////////
    // Constructor //
    /////////////////

    /**
     * This constructor is private because the class is not intended to ever
     * be instantiated.  The UVI generation is a very procedural process and
     * thus all the members are static.
     */
    private Q() {}

    /////////////
    // Methods //
    /////////////

    /**
     * Sets the class's output stream ({@link java.io.PrintWriter}).
     *
     * @param newWriter the output stream to set as the one to use when printing
     * @see uvi.Generator#generateHTMLFiles()
     * @see uvi.Generator#generateIndexFiles()
     */
    static void setWriter( PrintWriter newWriter )
    {
        curWriter = newWriter;
    }

    /**
     * Returns the class's output stream ({@link java.io.PrintWriter}).
     *
     * @return the currently set output stream
     * @see uvi.Generator#generateHTMLFiles()
     * @see uvi.Generator#generateIndexFiles()
     */
    static PrintWriter getWriter()
    {
        return curWriter;
    }

    /**
     * Places the given HTML code into the output stream without indenting
     * or printing a newline.
     *
     * @param html the HTML code to place into the output stream
     */
    static void oh( String html )
    {
        oh( -1, false, html );
    }

    /**
     * Places the given HTML code into the output stream and optionally
     * ending with a newline.  Does not indent.
     *
     * @param newLine whether or not to print a newline after the HTML code
     * @param html the HTML code to place into the output stream
     */
    static void oh( boolean newLine, String html )
    {
        oh( -1, newLine, html );
    }

    /**
     * Places the given HTML code into the output stream at the given
     * indentation level.  This method DOES print a newline.  Each level of
     * indentation prints three spaces to the output stream.
     *
     * @param indentLevel the indentation level at which to start the
     *        HTML code
     * @param html the HTML code to place into the output stream
     */
    static void oh( int indentLevel, String html )
    {
        oh( indentLevel, true, html );
    }

    /**
     * Places the given HTML code into the output stream at the given
     * indentation level and optionally prints a newline.  Each level of
     * indentation prints three spaces to the output stream.
     *
     * @param indentLevel the indentation level at which to start the
     *        HTML code
     * @param newLine whether or not to print a newline after the HTML code
     * @param html the HTML code to place into the output stream
     */
    static void oh( int indentLevel, boolean newLine, String html )
    {
        if( curWriter == null ) {
            return;
        }

        for( int i = 0; i < indentLevel; i++ ) {
            curWriter.print( "   " );
        }

        if( newLine ) {
            curWriter.println( html );
        } else {
            curWriter.print( html );
        }
    }
}

